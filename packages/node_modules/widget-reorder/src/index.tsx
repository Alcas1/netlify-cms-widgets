import * as React from 'react'
import { useState, useEffect } from 'react'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import { WidgetProps } from 'types'

import { reorder, diff, extract } from './utils'

export const ReorderWidget: React.FC<WidgetProps> = ({
  query, forID, value, field, onChange
}) => {
  const collection: string = field.get('collection')
  const fieldId: string = field.get('field_id')
  const fieldDisplay = field.get('field_display')

  const [ data, setData ] = useState([])
  useEffect(() => {
    const getOrder = async () => {
  
      const fieldsToBeExtracted = Array.from(new Set([fieldId, ...fieldDisplay.toJS()]))

      const result = await query(forID, collection, [fieldId], '')
      const data = result.payload.response.hits.map(payload => {
        return extract(payload.data, ...fieldsToBeExtracted)
      })
  
      if (!value) {
        setData(data)
        return
      }
  
      const currentOrder = value.toJS()
      const { newOrder, modified } = diff({
        currentOrder,
        data,
        key: fieldId,
      })
      // @ts-ignore
      setData(newOrder)
      if (modified) onChange(newOrder)
    }

    getOrder()
  }, [value])

  const handleDragEnd = result => {
    if (!result.destination) return

    const sortedData = reorder(
      data,
      result.source.index,
      result.destination.index
    )

    onChange(sortedData)
    // @ts-ignore
    setData(sortedData)
  }

  return (
    // <div>{JSON.stringify(data)}</div>
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="droppable">
        {(provided, snapshot) => (
          <div
            style={{
              padding: '1rem',
              background: snapshot.isDraggingOver ? 'lightblue' : '#dfdfe3',
              borderRadius: '3px',
            }}
            {...provided.droppableProps}
            ref={provided.innerRef}
          >
            {data.map((item, i) => (
              <Draggable
                key={item[fieldId]}
                draggableId={item[fieldId]}
                index={i}
              >
                {(provided, snapshot) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    style={{
                      padding: '1rem',
                      opacity: snapshot.isDragging ? 0.6 : 1,
                      boxShadow: snapshot.isDragging ?  '0 4px 16px 0 rgba(0,0,0,0.2)' : '0 2px 6px 0 rgba(0,0,0,0.2)',
                      background: '#fff',
                      borderRadius: '3px',
                      marginBottom: '0.5rem',
                      ...provided.draggableProps.style
                    }}
                  >
                    {fieldDisplay.map(fieldName => item[fieldName]).join(' ')}
                  </div>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
          </div>
        )}
      </Droppable>
    </DragDropContext>
  )
}
