import * as React from 'react'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import { WidgetProps } from 'types'

import { reorder, diff, extract } from './utils'

export class ReorderWidget extends React.Component<WidgetProps> {
  public state = {
    data: [],
  }

  public async componentDidMount() {
    const { query, forID, value, field, onChange } = this.props

    const collection: string = field.get('collection')
    const fieldId: string = field.get('field_id')
    const fieldDisplay: string[] = field.get('field_display')

    const fieldsToBeExtracted = Array.from(new Set([fieldId, ...fieldDisplay]))

    const result = await query(forID, collection, [fieldId], '')
    const data = result.payload.response.hits.map(payload => {
      return extract(payload.data, ...fieldsToBeExtracted)
    })

    const currentOrder = value.toJS()
    const { newOrder, modified } = diff({
      currentOrder,
      data,
      key: fieldId,
    })
    this.setState({ data: newOrder })
    if (modified) onChange(newOrder)
  }

  public handleDragEnd = result => {
    const { onChange } = this.props

    if (!result.destination) return

    const { data } = this.state
    const sortedData = reorder(
      data,
      result.source.index,
      result.destination.index
    )

    this.setState({
      data: sortedData,
    })

    onChange(sortedData)
  }

  public render() {
    const { field } = this.props
    const { data } = this.state

    const fieldId: string = field.get('field_id')

    if (data.length === 0) return <div>loading...</div>
    return (
      <DragDropContext onDragEnd={this.handleDragEnd}>
        <Droppable droppableId="droppable">
          {(provided, snapshot) => (
            <div
              // {...provided.droppableProps}
              // isDraggingOver={snapshot.isDraggingOver}
              ref={provided.innerRef}
            >
              {data.map((item, i) => (
                <Draggable
                  key={item[fieldId]}
                  draggableId={item[fieldId]}
                  index={i}
                >
                  {(provided, snapshot) => (
                    <div
                      // ref={provided.innerRef}
                      // {...provided.draggableProps}
                      // {...provided.dragHandleProps}
                      // isDragging={snapshot.isDragging}
                    >
                      {Object.values(item).join(' ')}
                    </div>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    )
  }
}
